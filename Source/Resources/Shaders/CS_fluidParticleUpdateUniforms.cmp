#include "fluidParticleCommons.hs"

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(binding = 4, set = 1, std140) buffer AliasedDynamicParticleBuffer
{
    uint maxVelocity;
	uint numberOfParticles; // TODO when this is data driven hook it up
    vec2 padding;
} g_aliasedDynamicParticleVariables;

void main() 
{
    uint globalThreadID = gl_GlobalInvocationID.x;
    uint localThreadID = gl_LocalInvocationID.x;
    uint groupID = gl_WorkGroupID.x;

    uint numberOfParticles = g_particleVariables.numberOfParticles;
	if (globalThreadID >= numberOfParticles)
		return;

    vec2 particleVelocity = globalParticleList[globalThreadID].velocity;
    float velocity = sqrt(dot(particleVelocity, particleVelocity));
    if (velocity == 0.0)
        velocity = 0.1;
	uint velocityAsUint = floatBitsToUint(velocity);
    atomicMax(g_aliasedDynamicParticleVariables.maxVelocity, velocityAsUint);
}