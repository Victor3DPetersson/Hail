#include "fluidParticleCommons.hs"

void CollideWithBounds(inout vec2 velocity, inout vec2 pPosToUpdate, float particleRadius)
{
    float halfRadius = particleRadius * 0.5;
    float collisionDampening = 0.5;
    vec2 upperBounds = vec2(100.0, 100.0) - halfRadius;
    vec2 lowerBounds = vec2(halfRadius, halfRadius);

    if ((pPosToUpdate.x) > upperBounds.x)
    {
        pPosToUpdate.x = upperBounds.x;
        velocity.x *= -1.0 * collisionDampening;
    }
    if ((pPosToUpdate.y) > upperBounds.y)
    {
        pPosToUpdate.y = upperBounds.y;
        velocity.y *= -1.0 * collisionDampening;
    }

    if ((pPosToUpdate.x) < lowerBounds.x)
    {
        pPosToUpdate.x = lowerBounds.x;
        velocity.x *= -1.0 * collisionDampening;
    }
    if ((pPosToUpdate.y) < lowerBounds.y)
    {
        pPosToUpdate.y = lowerBounds.y;
        velocity.y *= -1.0 * collisionDampening;
    }
}

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main() 
{
    uint globalThreadID = gl_GlobalInvocationID.x;
    uint localThreadID = gl_LocalInvocationID.x;
    uint groupID = gl_WorkGroupID.x;

    uint numberOfParticles = g_particleVariables.numberOfParticles;
	if (globalThreadID >= numberOfParticles)
		return;

	float mass = g_particleVariables.mass;
	float h = g_particleVariables.particleKernelRadius;
    const float adjustedDeltaTime = (g_particleVariables.particleSize / g_dynamicParticleVariables.maxVelocity);
	const float deltaTimeByMass = min(g_constantVariables.deltaTime_cameraZoom.x, adjustedDeltaTime) * g_particleVariables.deltaTimeModifier;
    
    FluidParticle particle = globalParticleList[globalThreadID];

    vec2 acceleration_pressure = particle.pressureForce / mass;
    vec2 velocity = (particle.intermediateVelocity + deltaTimeByMass * acceleration_pressure);
    vec2 position = particle.pos + velocity;
    
    CollideWithBounds(velocity, position, h);

    globalParticleList[globalThreadID].pos = position;
    globalParticleList[globalThreadID].velocity = velocity;
}