#include "fluidParticleCommons.hs"

layout(binding = 5, set = 1, rgba32f) uniform writeonly image2D outputImage;

layout (local_size_x = 64, local_size_y = 8, local_size_z = 1) in;
void main() 
{
    uvec2 samplePoint = uvec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

	if (samplePoint.x > g_constantVariables.renderTargetRes.x || samplePoint.y > g_constantVariables.renderTargetRes.y)
		return;

	float sampleRadiusPixelSpace = g_particleVariables.particleKernelRadius;
	vec2 fragTexCoord = vec2(float(samplePoint.x) / float(g_constantVariables.renderTargetRes.x), float(samplePoint.y) / float(g_constantVariables.renderTargetRes.y));
	
	vec2 cameraPixelPos = g_constantVariables.cameraPos * g_constantVariables.renderTargetRes;
	vec2 pixelParticlePos = vec2(float(samplePoint.x), float(samplePoint.y)) + vec2(cameraPixelPos.x, -cameraPixelPos.y);

	float sampleRadiusSq = g_particleVariables.particleKernelRadius * g_particleVariables.particleKernelRadius;
	float distanceToReachForDraw = sampleRadiusSq * 1.75;

	uint numberOfParticlesInRange = 0;
    uint numberOfParticles = g_particleVariables.numberOfParticles;
	ivec2 cellCoord = PositionToCellCoord(pixelParticlePos, g_particleVariables.particleKernelRadius);
	for (uint iCellID = 0; iCellID < 9; iCellID++)
	{
		ivec2 cellCoordToTest = cellCoord + CellOffsets[iCellID];
		uint key = GenerateKeyFromCellPos(cellCoordToTest, numberOfParticles);
		uint cellStartIndex = globalSpatialLookupStartIndices[key];
		for (uint i = cellStartIndex; i < numberOfParticles; i++)
		{
			if (globalSpatialLookupKeyIndexList[i].x != key)
				break;
			uint particleIndex = globalSpatialLookupKeyIndexList[i].y;

			if (i == numberOfParticles)
				break;
			FluidParticle particle = globalParticleList[particleIndex];
			vec2 cloudPoint = ((globalParticleList[particleIndex].pos));
			vec2 cloudPointToSamplePoint = (pixelParticlePos - cloudPoint);
			float distanceSquared = dot(cloudPointToSamplePoint, cloudPointToSamplePoint);

			if (distanceSquared <= sampleRadiusSq)
			{
				distanceToReachForDraw -= sampleRadiusSq - distanceSquared;
				numberOfParticlesInRange++;
			}
		}
	}

	bool bIsAValidSample = distanceToReachForDraw < 0.0;
	vec4 pixel = vec4(0.0, float(samplePoint.x), float(samplePoint.y), 0.0);
	if (bIsAValidSample)
		pixel.x = 1.0;

	imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), pixel);
}