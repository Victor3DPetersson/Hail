#version 450
//Add to include file later
layout(binding = 1, std140) uniform UniformBufferObject {
    uvec2 screenResolution;
    uvec2 renderResolution;
} constantVariables;

layout(binding = 1) uniform sampler2D texSampler;

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() 
{

	uint xHalfOffset = (constantVariables.screenResolution.x - constantVariables.renderResolution.x) / 2;
	uint yHalfOffset = (constantVariables.screenResolution.y - constantVariables.renderResolution.y) / 2;

	uint xIndex = gl_GlobalInvocationID.x; 
	uint yIndex = gl_GlobalInvocationID.y; 

	//if outside of main render area
	if(xIndex < xHalfOffset || xIndex > constantVariables.renderResolution.x + xHalfOffset ||
	yIndex < yHalfOffset || yIndex > constantVariables.renderResolution.y + yHalfOffset)
	{
		imageStore(outputImage, ivec2(xIndex, yIndex), vec4(0.0, 0.0, 0.0, 1.0));
	}
	else
	{
		float ratioX = constantVariables.screenResolution.x / constantVariables.screenResolution.y;
		float remappedXCoord = (xIndex - xHalfOffset) / constantVariables.renderResolution.x;
		float remappedYCoord = (yIndex - yHalfOffset) / constantVariables.renderResolution.y;
		vec3 color = texture(texSampler, vec2(1.0-remappedXCoord, remappedYCoord)).rgb;
		imageStore(outputImage, ivec2(xIndex, yIndex), vec4(color, 1.0));
	}
}