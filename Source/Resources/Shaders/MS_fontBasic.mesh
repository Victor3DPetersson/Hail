#include "shaderCommons.hs"

#extension GL_EXT_mesh_shader : require

layout( push_constant ) uniform constants
{
	uvec4 startOffset_padding; // uint uvec3 padding
} PushConstants;


// TODO: create a utility header for shaders with common operations
vec3 ColorFromPackedColor(uint packedColor)
{
    vec3 returnColor;
    returnColor.x = float((packedColor >> 24) & 0xff) / 255.0;
    returnColor.y = float((packedColor >> 16) & 0xff) / 255.0;
    returnColor.z = float((packedColor >> 8) & 0xff) / 255.0;
    return returnColor;
}

layout(binding = 0, set = 1, std140) buffer readonly GlyphVertexBuffer
{
   	vec4 glyphVerts[];
};

layout(binding = 1, set = 1, std140) buffer readonly GlyphPrimitiveBuffers
{
   	uvec4 glyphPrimitives[];// xyz indices, w for flags.
};

struct RenderInstance
{
    vec2 relativePos;
    float PixelSize;
    uint glyphletColor;

    uint vertexOffset;
    uint indexOffset;
    uint numberOfTrianglesNumberOfVertices; // 16 bits Tri count | << 16 bits vert count
    uint commandBufferIndex;
};

layout(binding = 2, set = 1, std140) buffer readonly InstanceBuffer
{
   	RenderInstance renderInstances[];
};

layout(binding = 3, set = 1, std140) buffer readonly TextCommandBuffer
{
    // vec2 for command position (aka pivot), float for rotation  // TODO bake in 2D Scale 
   	vec4 g_positionRotation[];
};

layout(binding = 4, set = 1, std140) uniform BatchToFirstInstanceBuffer
{
   	uvec4 g_batchOffsets[32];
};

layout (location = 0) perprimitiveEXT out uint outTriangleType[];
layout (location = 1) perprimitiveEXT out uint outTriangleID[];
layout (location = 2) out vec3 outTextColor[];

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
layout(max_vertices=128, max_primitives=128) out;

layout(triangles) out;

void main()
{   
    uint tid = gl_LocalInvocationIndex.x; 
    uint nVerts = 10;
    uint nPrims = 10;
    
    uint baseOffset = PushConstants.startOffset_padding.x / 4;
    uint offsetMod = PushConstants.startOffset_padding.x % 4;
    uint batchOffset = g_batchOffsets[baseOffset][offsetMod];
    uint instanceIndex = batchOffset + gl_WorkGroupID.x;
    RenderInstance glyphletInstance = renderInstances[instanceIndex];
    vec4 textCommandData = g_positionRotation[glyphletInstance.commandBufferIndex + PushConstants.startOffset_padding.x];

    vec3 glyphColor = ColorFromPackedColor(glyphletInstance.glyphletColor);
    uint numberOfVertices = (glyphletInstance.numberOfTrianglesNumberOfVertices >> 16) & 0xffff;
    uint numberOfPrimitives = glyphletInstance.numberOfTrianglesNumberOfVertices & 0xffff;

    SetMeshOutputsEXT(numberOfVertices, numberOfPrimitives);
    
    vec2 renderRes = vec2(g_constantVariables.renderTargetRes);
    float resolutionRatio = renderRes.y / renderRes.x;
    vec2 pixelSize = vec2((1.0 / renderRes.y) * glyphletInstance.PixelSize, (1.0 / renderRes.y) * glyphletInstance.PixelSize);

    if (tid <= numberOfPrimitives)
    {
        uint primID = glyphletInstance.indexOffset + tid;
        uvec4 indicesAndPrimFlag = glyphPrimitives[primID];
        gl_PrimitiveTriangleIndicesEXT[tid] = uvec3(indicesAndPrimFlag.xyz - glyphletInstance.vertexOffset);
        outTriangleType[tid] = indicesAndPrimFlag.w;
        outTriangleID[tid] = tid;
    }
    if (tid < numberOfVertices)
    {
        uint vertID = glyphletInstance.vertexOffset + tid;
        uint vertXOrY = (vertID % 2);
        vertID = vertID / 2;
        vec2 vertPos = vertXOrY == 0 ? glyphVerts[vertID].xy : glyphVerts[vertID].zw;

        vec2 vertPosFlippedY = vec2(vertPos.x, 1.0 - vertPos.y) * pixelSize;

	    vec2 pivotPoint = textCommandData.xy;
        float rotation = textCommandData.z;
        float cs = cos(rotation);
	    float sn = sin(rotation);
	    mat2 rotationMatrix = mat2(cs, -sn, sn, cs);

        vertPosFlippedY = vertPosFlippedY * rotationMatrix;
        vertPosFlippedY.x = vertPosFlippedY.x * resolutionRatio;
        vec2 glyphPosition = glyphletInstance.relativePos;
        glyphPosition = (glyphPosition * rotationMatrix);
        glyphPosition.x = glyphPosition.x * resolutionRatio;
        glyphPosition = glyphPosition + pivotPoint;

        vec2 vertPosNormalized = (vertPosFlippedY + glyphPosition) * 2.0 - 1.0;
        outTextColor[tid] = glyphColor;
        gl_MeshVerticesEXT[tid].gl_Position = vec4(vertPosNormalized, 0.001, 1.0);
    }
}